<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../../../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../../../.resources/report.gif" type="image/gif"/><title>TestFactory.java</title><link rel="stylesheet" href="../../../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../../../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="right"><a href="../../../.sessions.html" class="el_session">Sessions</a></span><a href="../../../index.html" class="el_report">Merged (Apr 28, 2012 2:01:54 PM)</a> &gt; <a href="../../index.html" class="el_group">Framework</a> &gt; <a href="../index.html" class="el_bundle">test</a> &gt; <a href="index.html" class="el_package">ks.client.game</a> &gt; <span class="el_source">TestFactory.java</span></div><h1>TestFactory.java</h1><pre class="source lang-java linenums">package ks.client.game;

import java.util.Collection;
import java.util.Iterator;
import java.util.Properties;

import junit.framework.TestCase;

<span class="nc" id="L9">public class TestFactory extends TestCase {</span>

	public void testCreate() {
<span class="nc" id="L12">		Iterator&lt;String&gt; it = Factory.validGameTypes();</span>
<span class="nc" id="L13">		assertTrue (it.hasNext());</span>
<span class="nc" id="L14">	}</span>
	
	public void testASolitaire() {
<span class="nc" id="L17">		Properties p = new Properties();</span>
<span class="nc" id="L18">		String s = &quot;heineman.Klondike&quot;;</span>
<span class="nc" id="L19">		p.setProperty(&quot;game&quot;, s);</span>
		
<span class="nc" id="L21">		Properties options = new Properties();</span>
		
<span class="nc" id="L23">		GameInformation gi = Factory.create(p, options);</span>
		
<span class="nc" id="L25">		assertEquals (s, gi.game);</span>
<span class="nc" id="L26">	}</span>
	
	public void testWordsteal() {
<span class="nc" id="L29">		Properties p = new Properties();</span>
<span class="nc" id="L30">		String ws = &quot;wordsteal.Wordsteal&quot;;</span>
<span class="nc" id="L31">		p.setProperty(&quot;game&quot;, ws);</span>
		
<span class="nc" id="L33">		Properties options = new Properties();</span>
		
<span class="nc" id="L35">		GameInformation gi = Factory.create(p, options);</span>
		
<span class="nc" id="L37">		assertEquals (ws, gi.game);</span>
<span class="nc" id="L38">	}</span>
	
	public void testInvalid() {
<span class="nc" id="L41">		Properties p = new Properties();</span>
<span class="nc" id="L42">		String ws = &quot;bogus-game&quot;;</span>
<span class="nc" id="L43">		p.setProperty(&quot;game&quot;, ws);</span>
		
<span class="nc" id="L45">		Properties options = new Properties();</span>
		
		try {
<span class="nc" id="L48">			Factory.create(p, options);</span>
<span class="nc" id="L49">			fail (&quot;must detect invalid options&quot;);</span>
<span class="nc" id="L50">		} catch (Exception e) {</span>
			// success
		}
		
		try {
<span class="nc" id="L55">			p = new Properties();</span>
<span class="nc" id="L56">			p.setProperty(&quot;game&quot;, &quot;java.lang.String&quot;);</span>
<span class="nc" id="L57">			Factory.create(p, options);</span>
<span class="nc" id="L58">			fail (&quot;must detect invalid options&quot;);</span>
<span class="nc" id="L59">		} catch (Exception e) {</span>
			// success
		}
<span class="nc" id="L62">	}</span>
	
	public void testDefaults() {
<span class="nc" id="L65">		Properties p = GameManager.defaultOptions(&quot;java.lang.String&quot;);</span>
<span class="nc bnc" id="L66" title="All 2 branches missed.">		assertTrue (p == null);</span>
		
<span class="nc" id="L68">		Iterator&lt;String&gt; set = GameManager.validGameTypes();</span>
<span class="nc bnc" id="L69" title="All 2 branches missed.">		while (set.hasNext()) {</span>
<span class="nc" id="L70">			String type = set.next();</span>
<span class="nc" id="L71">			p = GameManager.defaultOptions(type);</span>
<span class="nc bnc" id="L72" title="All 2 branches missed.">			assertFalse (p.size() == 0);</span>
		}
<span class="nc" id="L74">	}</span>
	
	public void testValidOptions() {
<span class="nc" id="L77">		Collection&lt;String&gt; set = GameManager.validOptions(&quot;java.lang.String&quot;);</span>

<span class="nc bnc" id="L79" title="All 2 branches missed.">		assertTrue (set == null);</span>
<span class="nc" id="L80">		Iterator&lt;String&gt; types = GameManager.validGameTypes();</span>
<span class="nc bnc" id="L81" title="All 2 branches missed.">		while (types.hasNext()) {</span>
<span class="nc" id="L82">			String type = types.next();</span>
<span class="nc" id="L83">			set = GameManager.validOptions(type);</span>
<span class="nc bnc" id="L84" title="All 2 branches missed.">			assertFalse (set == null);</span>
		}
<span class="nc" id="L86">	}</span>
	
}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.5.6.201201232323</span>Merged (Apr 28, 2012 2:01:54 PM)</div></body></html>