<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../../../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../../../.resources/report.gif" type="image/gif"/><title>RoomTest.java</title><link rel="stylesheet" href="../../../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../../../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="right"><a href="../../../.sessions.html" class="el_session">Sessions</a></span><a href="../../../index.html" class="el_report">Merged (Apr 28, 2012 2:01:54 PM)</a> &gt; <a href="../../index.html" class="el_group">WordstealClient</a> &gt; <a href="../index.html" class="el_bundle">test</a> &gt; <a href="index.html" class="el_package">wordstealclient.entities</a> &gt; <span class="el_source">RoomTest.java</span></div><h1>RoomTest.java</h1><pre class="source lang-java linenums">package wordstealclient.entities;

import static org.junit.Assert.*;

import org.junit.Test;

import wordstealclient.entities.Table.TABLE_STATE;
import static wordstealclient.entities.Room.MAX_TABLES ;

/**
 * @author jbodah
 */
<span class="fc" id="L13">public class RoomTest {</span>

	@Test
	public void testRoom() {
<span class="fc bfc" id="L17" title="All 2 branches covered.">		for( int i = 1 ; i &lt; MAX_TABLES ; i++ ) {</span>
<span class="fc" id="L18">			Room.getInstance().tables[i].setTableState( TABLE_STATE.PRIVATE ) ;</span>
<span class="fc" id="L19">			assertEquals( Room.getInstance().tables[i].getTableState(), TABLE_STATE.PRIVATE ) ;</span>
		}
<span class="fc" id="L21">	}</span>
	
	@Test
	public void testGetPlayerAndRemovePlayer() {
		// getPlayer
		// Player exists
<span class="fc" id="L27">		Player playerA = new Player(6000) ;</span>
<span class="fc" id="L28">		assertEquals( Room.getInstance().addPlayer(playerA), playerA ) ;</span>
<span class="fc" id="L29">		assertEquals( playerA, Room.getInstance().getPlayer(6000)) ;</span>
		
		// Player doesn't exist
<span class="fc" id="L32">		assertEquals( null, Room.getInstance().getPlayer(5)) ;</span>
		
		// removePlayer
		// Remove existing player
<span class="fc" id="L36">		assertEquals( playerA, Room.getInstance().removePlayer(6000) ) ;</span>
		
		// Remove player that isn't in room
<span class="fc" id="L39">		assertEquals( null, Room.getInstance().removePlayer(20) ) ;</span>
<span class="fc" id="L40">	}</span>
	
	@Test
	public void testAddPlayer() {
<span class="fc" id="L44">		Player playerA = new Player(5000) ;</span>
<span class="fc" id="L45">		assertEquals( Room.getInstance().addPlayer(playerA), playerA ) ;</span>
<span class="fc" id="L46">		assertEquals( Room.getInstance().addPlayer(null), null ) ;</span>
		
<span class="fc" id="L48">		Player playerB = new Player(5000) ;</span>
<span class="pc bpc" id="L49" title="1 of 2 branches missed.">		assertFalse( playerB == playerA ) ;</span>
<span class="fc" id="L50">		assertEquals( Room.getInstance().addPlayer(playerA), null ) ;</span>
<span class="fc" id="L51">		assertEquals( Room.getInstance().addPlayer(playerB), null ) ;</span>
<span class="fc" id="L52">		assertEquals( Room.getInstance().getPlayer(5000), playerA ) ;</span>
<span class="fc" id="L53">	}</span>
	
	@Test
	public void testTableIDs() {
<span class="fc bfc" id="L57" title="All 2 branches covered.">		for(int i = 1 ; i &lt; MAX_TABLES ; i++) {</span>
<span class="fc" id="L58">			assertEquals( Room.getInstance().getTable(i).getTableID(), i ) ;</span>
		}
<span class="fc" id="L60">	}</span>
}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.5.6.201201232323</span>Merged (Apr 28, 2012 2:01:54 PM)</div></body></html>