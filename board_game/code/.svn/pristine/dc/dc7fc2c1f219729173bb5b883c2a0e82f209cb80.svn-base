<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../../../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../../../.resources/report.gif" type="image/gif"/><title>TestMultiDeck.java</title><link rel="stylesheet" href="../../../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../../../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="right"><a href="../../../.sessions.html" class="el_session">Sessions</a></span><a href="../../../index.html" class="el_report">Merged (Apr 28, 2012 2:01:54 PM)</a> &gt; <a href="../../index.html" class="el_group">Framework</a> &gt; <a href="../index.html" class="el_bundle">test</a> &gt; <a href="index.html" class="el_package">ks.common.model</a> &gt; <span class="el_source">TestMultiDeck.java</span></div><h1>TestMultiDeck.java</h1><pre class="source lang-java linenums">package ks.common.model;

import junit.framework.TestCase;

// nothing much to test since logic is internalized.
<span class="nc" id="L6">public class TestMultiDeck extends TestCase {</span>

	public void testConstruct() {
		// invalid
		try {
<span class="nc" id="L11">			new MultiDeck(-4);</span>
<span class="nc" id="L12">			fail(&quot;Can't allow negative argument to MultiDeck.&quot;);</span>
<span class="nc" id="L13">		} catch (Exception e) {</span>
			
		}
		
		
<span class="nc" id="L18">		Deck d = new MultiDeck(&quot;sample&quot;, 2);</span>
<span class="nc" id="L19">		d.create(97);</span>
		
<span class="nc" id="L21">		Deck d2 = new MultiDeck(&quot;sample&quot;, 2);</span>
<span class="nc" id="L22">		d2.create(97);</span>
		
		// assert all cards are the same
<span class="nc bnc" id="L25" title="All 2 branches missed.">		while (!d.empty()) {</span>
<span class="nc" id="L26">			Card c = d.get();</span>
<span class="nc" id="L27">			Card c2 = d2.get();</span>
			
<span class="nc" id="L29">			assertEquals (c, c2);</span>
		}
		
<span class="nc" id="L32">		assertTrue (d2.empty());</span>
<span class="nc" id="L33">	}</span>
	
	// however, there are two special deals: -1 (OrderByRank) and -2 (OrderBySuit)
	public void testSpecial() {
<span class="nc" id="L37">		Deck d = new MultiDeck(&quot;sample&quot;, 1);</span>
<span class="nc" id="L38">		d.create(-1);</span>
<span class="nc" id="L39">		assertEquals (52, d.count());</span>
		
		// get four and all same rank
<span class="nc bnc" id="L42" title="All 2 branches missed.">		while (!d.empty()) {</span>
<span class="nc" id="L43">			Card []cards = { d.get(), d.get(), d.get(), d.get() };</span>
			
<span class="nc bnc" id="L45" title="All 2 branches missed.">			for (int i=  1; i &lt; cards.length; i++) {</span>
<span class="nc" id="L46">				assertTrue (cards[0].sameRank(cards[i]));</span>
			}
		}
		
<span class="nc" id="L50">		d = new MultiDeck(2);</span>
<span class="nc" id="L51">		d.create(-2);</span>
<span class="nc" id="L52">		assertEquals (104, d.count());</span>
		
		// get four and all same suit
<span class="nc bnc" id="L55" title="All 2 branches missed.">		while (!d.empty()) {</span>
<span class="nc" id="L56">			Card []cards = { d.get(), d.get(), d.get(), d.get(), d.get(), d.get(), d.get(), d.get(), d.get(), d.get(), d.get(), d.get(), d.get() };</span>
			
<span class="nc bnc" id="L58" title="All 2 branches missed.">			for (int i=  1; i &lt; cards.length; i++) {</span>
<span class="nc" id="L59">				assertTrue (cards[0].sameSuit(cards[i]));</span>
			}
		}
<span class="nc" id="L62">	}</span>
	
	
}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.5.6.201201232323</span>Merged (Apr 28, 2012 2:01:54 PM)</div></body></html>