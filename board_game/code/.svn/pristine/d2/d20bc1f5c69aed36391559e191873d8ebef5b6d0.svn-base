<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../../../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../../../.resources/report.gif" type="image/gif"/><title>ChatController.java</title><link rel="stylesheet" href="../../../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../../../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="right"><a href="../../../.sessions.html" class="el_session">Sessions</a></span><a href="../../../index.html" class="el_report">Merged (Apr 28, 2012 2:01:54 PM)</a> &gt; <a href="../../index.html" class="el_group">Framework</a> &gt; <a href="../index.html" class="el_bundle">src</a> &gt; <a href="index.html" class="el_package">ks.server.controllers</a> &gt; <span class="el_source">ChatController.java</span></div><h1>ChatController.java</h1><pre class="source lang-java linenums">package ks.server.controllers;

import java.util.ArrayList;

import ks.framework.common.Message;
import ks.framework.communicator.Communicator;
import ks.server.interfaces.IProcessServerMessage;

import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * Chat controller handles CHAT messages.
 * 
 * &lt;xs:element name=&quot;chat&quot;&gt;
 * &lt;xs:complexType&gt;
 *  &lt;xs:sequence&gt;
 *    &lt;xs:element ref=&quot;player-id&quot; minOccurs='0' maxOccurs='unbounded'/&gt;
 *    &lt;xs:element ref=&quot;text&quot;/&gt;
 *  &lt;/xs:sequence&gt;
 * &lt;/xs:complexType&gt;
 * &lt;/xs:element&gt;
 * 
 * @author George
 *
 */
<span class="nc" id="L29">public class ChatController implements IProcessServerMessage {</span>

	public boolean process(Communicator com, Message m) {
<span class="nc" id="L32">		String originator = m.getOriginator();</span>
		//Node text = m.contentsChild();
<span class="nc" id="L34">        String s = &quot;&quot;; // text.getTextContent();</span>
        
        // get all players to which this chat is intended. If no 
        // players then we do a broadcast-minus-self
<span class="nc" id="L38">        ArrayList&lt;String&gt; targets = new ArrayList&lt;String&gt;();</span>
        
        // traverse the XML DOM to retrieve the child PLAYER 
        // nodes and from them retrieve PLAYER attributes.
<span class="nc" id="L42">        String isPublic = &quot;true&quot;;</span>
<span class="nc" id="L43">        Node root = m.contents();</span>
<span class="nc" id="L44">        NodeList children = root.getChildNodes();</span>
<span class="nc bnc" id="L45" title="All 2 branches missed.">        for (int i = 0; i &lt; children.getLength(); i++) {</span>
<span class="nc" id="L46">        	Node child = children.item(i);</span>
        	
        	// if a PLAYER-ID node, then add to our targets set
<span class="nc bnc" id="L49" title="All 2 branches missed.">        	if (child.getNodeName().equals(&quot;player-id&quot;)) {</span>
        		// get the &quot;player&quot; attribute from that node.
<span class="nc" id="L51">        		NamedNodeMap map = child.getAttributes();</span>
<span class="nc" id="L52">        		Node pname = map.getNamedItem(&quot;player&quot;);</span>
<span class="nc" id="L53">        		targets.add(pname.getNodeValue());</span>
<span class="nc" id="L54">        		isPublic = &quot;false&quot;;</span>
        	}
<span class="nc bnc" id="L56" title="All 2 branches missed.">        	else if (child.getNodeName().equals(&quot;text&quot;)) {</span>
        		// get the content from that node.
<span class="nc" id="L58">        		NodeList childNodes = child.getChildNodes();</span>
<span class="nc" id="L59">        		s = childNodes.item(0).getNodeValue();</span>
        	}
        }
        
        // produce successful request. note that client is responsible 
        // now for tagging from.
<span class="nc" id="L65">        StringBuilder sb = new StringBuilder(Message.responseHeader(true));</span>
<span class="nc" id="L66">        sb.append(&quot;&lt;output public='&quot; + isPublic + &quot;' from='&quot; + originator + &quot;'&gt;&lt;text&gt;&quot;);</span>
<span class="nc" id="L67">        sb.append(s);</span>
<span class="nc" id="L68">        sb.append(&quot;&lt;/text&gt;&lt;/output&gt;&lt;/response&gt;&quot;);</span>
<span class="nc" id="L69">        Document d = Message.construct(sb.toString());</span>
        
<span class="nc" id="L71">        Message r = new Message (d);</span>
<span class="nc" id="L72">        r.setOriginator(originator);</span>
<span class="nc bnc" id="L73" title="All 2 branches missed.">        if (targets.isEmpty()) {</span>
	        // send to all clients EXCEPT self.
<span class="nc" id="L75">	        r.setBroadcast();</span>
<span class="nc" id="L76">	        return com.distribute(r);</span>
        } else {
<span class="nc" id="L78">        	return com.distribute(targets.iterator(), r);</span>
        }
	}

}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.5.6.201201232323</span>Merged (Apr 28, 2012 2:01:54 PM)</div></body></html>