<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../../../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../../../.resources/report.gif" type="image/gif"/><title>LocalServerProcessor.java</title><link rel="stylesheet" href="../../../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../../../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="right"><a href="../../../.sessions.html" class="el_session">Sessions</a></span><a href="../../../index.html" class="el_report">Merged (Apr 28, 2012 2:01:54 PM)</a> &gt; <a href="../../index.html" class="el_group">Framework</a> &gt; <a href="../index.html" class="el_bundle">test</a> &gt; <a href="index.html" class="el_package">ks</a> &gt; <span class="el_source">LocalServerProcessor.java</span></div><h1>LocalServerProcessor.java</h1><pre class="source lang-java linenums">package ks;

import java.util.ArrayList;

import arch.ServerExtension;

import ks.framework.common.Message;
import ks.framework.communicator.Communicator;
import ks.framework.interfaces.IClientProcessor;

/**
 * A LocalClientProcessor is used during testing to construct a queue of messages
 * being delivered back from the server to the client.
 * &lt;p&gt;
 * Using this instantiation of a {@link IClientProcessor} it becomes possible 
 * to test a wide variety of client-side behaviors.
 * 
 * @author George Heineman
 */
public class LocalServerProcessor extends ServerExtension {

<span class="nc" id="L22">	public LocalServerProcessor() {</span>
		
<span class="nc" id="L24">	}</span>
	
	/** Store all messages in queue to be inspected, retrieved. */
<span class="nc" id="L27">	ArrayList&lt;Message&gt; queue = new ArrayList&lt;Message&gt;(); </span>
	
	@Override
	public boolean process(Communicator com, Message m) {
<span class="nc" id="L31">		synchronized (queue) {</span>
<span class="nc" id="L32">			queue.add(m);</span>
		}
		
<span class="nc" id="L35">		return true;</span>
	}

	/** retrieve the next message to be processed. */
	public Message dequeue() {
		Message m;
		
<span class="nc" id="L42">		synchronized (queue) {</span>
<span class="nc" id="L43">			m = queue.remove(0);</span>
		}
		
<span class="nc" id="L46">		return m;</span>
	}

	/** Determine whether a message is waiting. */
	public boolean hasMessage() {
		
<span class="nc" id="L52">		synchronized (queue) {</span>
<span class="nc bnc" id="L53" title="All 2 branches missed.">			return !queue.isEmpty();</span>
		}
		
	}

}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.5.6.201201232323</span>Merged (Apr 28, 2012 2:01:54 PM)</div></body></html>