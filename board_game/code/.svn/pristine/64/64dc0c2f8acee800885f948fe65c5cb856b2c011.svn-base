<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../../../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../../../.resources/report.gif" type="image/gif"/><title>Parser.java</title><link rel="stylesheet" href="../../../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../../../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="right"><a href="../../../.sessions.html" class="el_session">Sessions</a></span><a href="../../../index.html" class="el_report">Merged (Apr 28, 2012 2:01:54 PM)</a> &gt; <a href="../../index.html" class="el_group">Framework</a> &gt; <a href="../index.html" class="el_bundle">test</a> &gt; <a href="index.html" class="el_package">eclemma</a> &gt; <span class="el_source">Parser.java</span></div><h1>Parser.java</h1><pre class="source lang-java linenums"><span class="nc" id="L1">package eclemma;</span>

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Hashtable;
import java.util.Scanner;
/**
 * Given a directory containing *.html files, extract the coverage information
 * for each package and prepare CSV file for importing into Excel.
 * 
 * Note: this only validates package-level aggregation, a useful but not
 * completely valid way of evaluation coverage.
 * 
 * @author George Heineman
 */
<span class="nc" id="L21">public class Parser {</span>

	public static final String header = &quot;&lt;H3&gt;COVERAGEÂ BREAKDOWNÂ BYÂ PACKAGE&lt;/H3&gt;&quot;;
	public static final String summary = &quot;&lt;H2&gt;OVERALLÂ COVERAGEÂ SUMMARY&lt;/H2&gt;&quot;;
	
	public static final int PACKAGE = 0;
	public static final int LINE = 4;
	
	/**
	 * Key is file name (typically date) and value is a hashtable&lt;package,lineCoverage&gt;
	 */
<span class="nc" id="L32">	static Hashtable&lt;String,Hashtable&lt;String,String&gt;&gt; values = new Hashtable&lt;String,Hashtable&lt;String,String&gt;&gt;();</span>
	
	/**
	 * Keys (dates)
	 * @param args
	 */
<span class="nc" id="L38">	static ArrayList&lt;String&gt; keys = new ArrayList&lt;String&gt;();  </span>
	
	public static void main(String[] args) {
		
<span class="nc" id="L42">		System.out.println(&quot;Enter directory containing EclEmma HTML reports:&quot;);</span>
<span class="nc" id="L43">		Scanner sc = new Scanner (System.in);</span>
<span class="nc" id="L44">		File f = new File (sc.nextLine());</span>
		
<span class="nc" id="L46">		File[] list = f.listFiles(new FilenameFilter() {</span>

			@Override
			public boolean accept(File dir, String name) {
<span class="nc bnc" id="L50" title="All 2 branches missed.">				if (name.toUpperCase().endsWith(&quot;HTML&quot;)) { return true; }</span>
<span class="nc" id="L51">				return false;</span>
			}
			
		});
		
		try {
			// compute keys by file name. Hashtable has all information.
<span class="nc" id="L58">			process(list);</span>
			
			// combinepackageNames
<span class="nc" id="L61">			ArrayList&lt;String&gt; combinedPackages = extractPackages();</span>
<span class="nc" id="L62">			Collections.sort(combinedPackages);</span>
			
<span class="nc" id="L64">			filter (combinedPackages);</span>
			
			// header
<span class="nc" id="L67">			System.out.print(&quot;package,&quot;);</span>
<span class="nc bnc" id="L68" title="All 2 branches missed.">			for (String key:keys) {</span>
<span class="nc" id="L69">				System.out.print(key + &quot;,&quot;);</span>
			}
<span class="nc" id="L71">			System.out.println();</span>
			
			// columns
<span class="nc bnc" id="L74" title="All 2 branches missed.">			for (String pack : combinedPackages) {</span>
<span class="nc" id="L75">				System.out.print(pack + &quot;,&quot;);</span>
<span class="nc bnc" id="L76" title="All 2 branches missed.">				for (String key:keys) {</span>
<span class="nc" id="L77">					Hashtable&lt;String, String&gt; ht = values.get(key);</span>
<span class="nc" id="L78">					String val = ht.get(pack);</span>
<span class="nc bnc" id="L79" title="All 2 branches missed.">					if (val == null) { val = &quot;0.0&quot;; }</span>
<span class="nc" id="L80">					System.out.print(val + &quot;,&quot;);</span>
				}
<span class="nc" id="L82">				System.out.println();</span>
			}
			
<span class="nc" id="L85">		} catch (FileNotFoundException e) {</span>
			// shouldn't happen
<span class="nc" id="L87">			System.err.println(&quot;Unable to locate file:&quot; + e.getMessage());</span>
		}
<span class="nc" id="L89">	}</span>

	/** 
	 * Eliminate set of non-related packages from consideration.
	 * 
	 * @param combinedPackages
	 */
	private static void filter(ArrayList&lt;String&gt; combinedPackages) {
		// TODO Auto-generated method stub
		
<span class="nc" id="L99">	}</span>

	/**
	 * Determine unique set of packages.
	 * 
	 * Eliminate non-package names
	 * 
	 * @return
	 */
	private static ArrayList&lt;String&gt; extractPackages() {
<span class="nc" id="L109">		ArrayList&lt;String&gt; packages = new ArrayList&lt;String&gt;();</span>
		
<span class="nc bnc" id="L111" title="All 2 branches missed.">		for (String key : keys) {</span>
<span class="nc" id="L112">			Hashtable&lt;String,String&gt; ht = values.get(key);</span>
			
<span class="nc bnc" id="L114" title="All 2 branches missed.">			for (String pack : ht.keySet()) {</span>
<span class="nc bnc" id="L115" title="All 2 branches missed.">				if (!packages.contains(pack)) {</span>
<span class="nc" id="L116">					packages.add(pack);</span>
				}
			}
		}	
		
<span class="nc" id="L121">		return packages;</span>
	}

	private static void process(File[] list) throws FileNotFoundException {
<span class="nc" id="L125">		keys = new ArrayList&lt;String&gt;();</span>
<span class="nc bnc" id="L126" title="All 2 branches missed.">		for (File f : list) {</span>
<span class="nc" id="L127">			String name= f.getName();</span>
<span class="nc" id="L128">			keys.add(name);</span>
			
<span class="nc" id="L130">			Hashtable&lt;String,String&gt; ht = new Hashtable&lt;String,String&gt;();</span>
<span class="nc" id="L131">			values.put(name, ht);</span>
			
			// load up string into memory.
<span class="nc" id="L134">			String html = loadup(f);</span>
<span class="nc" id="L135">			System.out.println(&quot;&quot;);</span>
			

			// find &quot;COVERAGE BREAKDOWN BY SUMMARY&quot;;
<span class="nc" id="L139">			int pos = html.indexOf(summary);</span>
<span class="nc" id="L140">			pos += summary.length();</span>
			
<span class="nc" id="L142">			String table = getTable(html, pos);</span>
<span class="nc" id="L143">			pos += table.length();</span>
			
			// go until we get to &lt;/TABLE&gt;
<span class="nc" id="L146">			String summary = getRow(html, pos);</span>
<span class="nc" id="L147">			pos+= summary.length();</span>
			//emitHeader(header);
<span class="nc" id="L149">			String row = getRow(html, pos);</span>
			
<span class="nc" id="L151">			String classS = extractRow(row, 0);</span>
<span class="nc" id="L152">			String methodS = extractRow(row, 1);</span>
<span class="nc" id="L153">			String blockS = extractRow(row, 2);</span>
<span class="nc" id="L154">			String lineS = extractRow(row, 3);</span>
			
<span class="nc" id="L156">			System.out.print(f.getName() + &quot;,&quot;);</span>
<span class="nc" id="L157">			System.out.print(classS.replace('/', ',')); System.out.print(&quot;,&quot;);</span>
<span class="nc" id="L158">			System.out.print(methodS.replace('/', ',')); System.out.print(&quot;,&quot;);</span>
<span class="nc" id="L159">			System.out.print(blockS.replace('/', ',')); System.out.print(&quot;,&quot;);</span>
<span class="nc" id="L160">			System.out.println(lineS.replace('/', ','));</span>
			
			// find &quot;COVERAGE BREAKDOWN BY PACKAGE&quot;;
<span class="nc" id="L163">			pos = html.indexOf(header);</span>
<span class="nc" id="L164">			pos += header.length();</span>
			
<span class="nc" id="L166">			table = getTable(html, pos);</span>
<span class="nc" id="L167">			pos += table.length();</span>
			
			// go until we get to &lt;/TABLE&gt;
<span class="nc" id="L170">			String header = getRow(html, pos);</span>
<span class="nc" id="L171">			pos+= header.length();</span>
<span class="nc" id="L172">			System.out.println();</span>
			
<span class="nc" id="L174">			for (;;) {</span>

<span class="nc" id="L176">				 row = getRow(html, pos);</span>
<span class="nc bnc" id="L177" title="All 2 branches missed.">				if (row.length() == 0 ) {</span>
<span class="nc" id="L178">					break;</span>
				}
				
<span class="nc" id="L181">				String packageName = emitRow(row, PACKAGE);</span>
<span class="nc" id="L182">				String line = emitRow(row, LINE);</span>
				
				// if valid package, then insert
<span class="nc bnc" id="L185" title="All 2 branches missed.">				if (!packageName.contains(&quot;Â&quot;)) {</span>
<span class="nc" id="L186">					ht.put(packageName, line);</span>
				}
				
				//System.out.println(packageName + &quot;,&quot; + line);
				
<span class="nc" id="L191">				pos += row.length();</span>
			}
			
			// done
			
		}
	
<span class="nc" id="L198">	}</span>
	

	/**
	 * Request the ith position in this row (0 = name, 1=class, 2=method, 3=block, 4=line)
	 * @param row
	 * @param position
	 * @return
	 */
	private static String extractRow(String row, int position) {
<span class="nc" id="L208">		String str = &quot;&lt;TR CLASS=\&quot;o\&quot;&gt;&quot;;</span>
<span class="nc" id="L209">		int idx = row.indexOf(str);</span>
<span class="nc bnc" id="L210" title="All 2 branches missed.">		if (idx == -1) {</span>
<span class="nc" id="L211">			str = &quot;&lt;TR&gt;&quot;;</span>
<span class="nc" id="L212">			idx = row.indexOf(str);</span>
		}
<span class="nc" id="L214">		idx = idx + str.length();</span>
		
		// treat first one special because of embedded lnks
<span class="nc" id="L217">		int close = row.indexOf(&quot;&gt;&quot;, idx);</span>
<span class="nc" id="L218">		int open = row.indexOf(&quot;&lt;&quot;, close);</span>
//		
//		// skip A href
//		close = row.indexOf(&quot;&gt;&quot;, open);
//		open = row.indexOf(&quot;&lt;&quot;, close);
//		if (position-- == 0) {
//			return row.substring(close+1, open);
//		}
//		
		// values are of the form &quot;xx%\A\A (y/z)&quot; and I want to emit (y/z)
<span class="nc" id="L228">		idx = 4 + row.indexOf(&quot;/TD&gt;&quot;, open);</span>
<span class="nc bnc" id="L229" title="All 2 branches missed.">		while (idx &lt; row.length()) {</span>
<span class="nc" id="L230">			close = row.indexOf(&quot;&gt;&quot;, idx);</span>
<span class="nc" id="L231">			open = row.indexOf(&quot;&lt;&quot;, close);</span>
<span class="nc bnc" id="L232" title="All 2 branches missed.">			if (open &lt; 0) { break; } // gone too far</span>
			
<span class="nc" id="L234">			String val = row.substring(close+1, open);</span>
			try {
<span class="nc" id="L236">				int parenIdx = val.indexOf(&quot;(&quot;);</span>
<span class="nc" id="L237">				int parenIdxClose = val.indexOf(&quot;)&quot;);</span>
<span class="nc bnc" id="L238" title="All 2 branches missed.">				if (parenIdx &gt; 0) {</span>
<span class="nc" id="L239">					val = val.substring(parenIdx+1, parenIdxClose);</span>
				}
<span class="nc" id="L241">			} catch (Exception e) {</span>
				// if fails, fall back to original 'val'
			}
			
<span class="nc bnc" id="L245" title="All 2 branches missed.">			if (position-- == 0) {</span>
<span class="nc" id="L246">				return val;</span>
			}

<span class="nc" id="L249">			idx = row.indexOf(&quot;&gt;&quot;, open) + 1;</span>
		}
		
<span class="nc" id="L252">		return &quot;&quot;;</span>
	}

	private static void emitHeader(String row) {

<span class="nc" id="L257">		int idx = row.indexOf(&quot;&lt;TR&gt;&quot;);</span>
<span class="nc" id="L258">		idx = idx + 4;</span>
		
		// treat first one special because of embedded lnks
<span class="nc" id="L261">		int close = row.indexOf(&quot;&gt;&quot;, idx);</span>
<span class="nc" id="L262">		int open = row.indexOf(&quot;&lt;&quot;, close);</span>
		
<span class="nc bnc" id="L264" title="All 2 branches missed.">		while (idx &lt; row.length()) {</span>
<span class="nc" id="L265">			close = row.indexOf(&quot;&gt;&quot;, idx);</span>
<span class="nc" id="L266">			open = row.indexOf(&quot;&lt;&quot;, close);</span>
<span class="nc bnc" id="L267" title="All 2 branches missed.">			if (open &lt; 0) { break; } // gone too far</span>
<span class="nc" id="L268">			System.out.print(&quot;\&quot;&quot; + row.substring(close+1, open) + &quot;\&quot;&quot;);</span>
<span class="nc" id="L269">			System.out.print(&quot;,&quot;);</span>
<span class="nc" id="L270">			idx = row.indexOf(&quot;&gt;&quot;, open) + 1;</span>
		}
<span class="nc" id="L272">		System.out.println();</span>
<span class="nc" id="L273">	}</span>

	/**
	 * Request the ith position in this row (0 = name, 1=class, 2=method, 3=block, 4=line)
	 * @param row
	 * @param position
	 * @return
	 */
	private static String emitRow(String row, int position) {
<span class="nc" id="L282">		String str = &quot;&lt;TR CLASS=\&quot;o\&quot;&gt;&quot;;</span>
<span class="nc" id="L283">		int idx = row.indexOf(str);</span>
<span class="nc bnc" id="L284" title="All 2 branches missed.">		if (idx == -1) {</span>
<span class="nc" id="L285">			str = &quot;&lt;TR&gt;&quot;;</span>
<span class="nc" id="L286">			idx = row.indexOf(str);</span>
		}
<span class="nc" id="L288">		idx = idx + str.length();</span>
		
		// treat first one special because of embedded lnks
<span class="nc" id="L291">		int close = row.indexOf(&quot;&gt;&quot;, idx);</span>
<span class="nc" id="L292">		int open = row.indexOf(&quot;&lt;&quot;, close);</span>
		
		// skip A href
<span class="nc" id="L295">		close = row.indexOf(&quot;&gt;&quot;, open);</span>
<span class="nc" id="L296">		open = row.indexOf(&quot;&lt;&quot;, close);</span>
<span class="nc bnc" id="L297" title="All 2 branches missed.">		if (position-- == 0) {</span>
<span class="nc" id="L298">			return row.substring(close+1, open);</span>
		}
		
		// values are of the form &quot;xx%\A\A (y/z)&quot; and I want to emit .xx
<span class="nc" id="L302">		idx = 4 + row.indexOf(&quot;/TD&gt;&quot;, open);</span>
<span class="nc bnc" id="L303" title="All 2 branches missed.">		while (idx &lt; row.length()) {</span>
<span class="nc" id="L304">			close = row.indexOf(&quot;&gt;&quot;, idx);</span>
<span class="nc" id="L305">			open = row.indexOf(&quot;&lt;&quot;, close);</span>
<span class="nc bnc" id="L306" title="All 2 branches missed.">			if (open &lt; 0) { break; } // gone too far</span>
			
<span class="nc" id="L308">			String val = row.substring(close+1, open);</span>
			try {
<span class="nc" id="L310">				int pctidx = val.indexOf(&quot;%&quot;);</span>
<span class="nc bnc" id="L311" title="All 2 branches missed.">				if (pctidx &gt; 0) {</span>
<span class="nc" id="L312">					val = val.substring(0, pctidx);</span>
<span class="nc" id="L313">					float ival = Integer.valueOf(val);</span>
<span class="nc" id="L314">					ival /= 100;</span>
<span class="nc" id="L315">					val = &quot;&quot; + ival;</span>
				}
<span class="nc" id="L317">			} catch (Exception e) {</span>
				// if fails, fall back to original 'val'
			}
			
<span class="nc bnc" id="L321" title="All 2 branches missed.">			if (position-- == 0) {</span>
<span class="nc" id="L322">				return val;</span>
			}

<span class="nc" id="L325">			idx = row.indexOf(&quot;&gt;&quot;, open) + 1;</span>
		}
		
<span class="nc" id="L328">		return &quot;&quot;;</span>
	}

	
	private static String getRow(String html, int pos) {
		// find end of &lt;TR tag&quot;
<span class="nc" id="L334">		int close = html.indexOf(&quot;&lt;/TR&gt;&quot;, pos);</span>
<span class="nc bnc" id="L335" title="All 2 branches missed.">		if (close &lt; 0) { return &quot;&quot;; }</span>
<span class="nc" id="L336">		return html.substring(pos, close+5);</span>
	}

	private static String getTable(String html, int pos) {
		// find end of &lt;TABLE tag&quot;
<span class="nc" id="L341">		int close = html.indexOf(&quot;&gt;&quot;, pos);</span>
<span class="nc bnc" id="L342" title="All 2 branches missed.">		if (close &lt; 0) { return &quot;&quot;; }</span>
<span class="nc" id="L343">		return html.substring(pos, close+1);</span>
	}

	/**
	 * Load up file into string (assumes can fit in memory).
	 * 
	 * @param f
	 * @return
	 */
	private static String loadup(File f) {
		FileReader reader;
		try {
<span class="nc" id="L355">			reader = new FileReader(f);</span>
<span class="nc" id="L356">			StringBuffer sb = new StringBuffer();</span>
<span class="nc" id="L357">			char[] buffer = new char[16384];</span>
<span class="nc bnc" id="L358" title="All 2 branches missed.">			while (reader.ready()) {</span>
<span class="nc" id="L359">				int len = reader.read(buffer);</span>
<span class="nc" id="L360">				sb.append(buffer,0, len);</span>
			}
			
<span class="nc" id="L363">			return sb.toString();</span>
<span class="nc" id="L364">		} catch (IOException e) {</span>
<span class="nc" id="L365">			System.err.println(&quot;Error loading up:&quot; + f);</span>
<span class="nc" id="L366">			return &quot;&quot;;</span>
		}
		
	}
}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.5.6.201201232323</span>Merged (Apr 28, 2012 2:01:54 PM)</div></body></html>