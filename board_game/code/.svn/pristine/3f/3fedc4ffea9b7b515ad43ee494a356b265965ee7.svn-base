<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../../../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../../../.resources/report.gif" type="image/gif"/><title>TestLobbyOutputController.java</title><link rel="stylesheet" href="../../../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../../../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="right"><a href="../../../.sessions.html" class="el_session">Sessions</a></span><a href="../../../index.html" class="el_report">Merged (Apr 28, 2012 2:01:54 PM)</a> &gt; <a href="../../index.html" class="el_group">Framework</a> &gt; <a href="../index.html" class="el_bundle">test</a> &gt; <a href="index.html" class="el_package">ks.client.controllers</a> &gt; <span class="el_source">TestLobbyOutputController.java</span></div><h1>TestLobbyOutputController.java</h1><pre class="source lang-java linenums">package ks.client.controllers;

import org.w3c.dom.Document;

import arch.ClientExtension;

import junit.framework.TestCase;
import ks.client.UserContext;
import ks.client.lobby.LobbyFrame;
import ks.client.processor.ClientProcessor;
import ks.framework.common.Configure;
import ks.framework.common.Message;
import ks.server.ipc.Server;

/** 
 * Test Lobby output controller. Although there seems to be no need to 
 * include the server, I show the full form here because most of the time
 * the client assumes it is &quot;connected&quot; to the server, so in this way we
 * are testing as close as possible to real life.
 * &lt;p&gt;
 * To be clear, a JUnit test case is defined in a single method that
 * is of the form:
 * 
 *   public void testXXXXX() {
 *      ...
 *   }
 *   
 * So in this class there is a single test case, called testValidOutput.
 * 
 * @author George Heineman
 */
<span class="nc" id="L32">public class TestLobbyOutputController extends TestCase {</span>
	
	// host
	public static final String localhost = &quot;localhost&quot;;
	
	// sample credentials (really meaningless in the testing case)
	public static final String user = &quot;11323&quot;;
	public static final String password = &quot;password&quot;;
	
	/** Constructed objects for this test case. */
	UserContext context;
	LobbyFrame lobby;
	
	// random port 8000-10000 to avoid arbitrary conflicts
	int port;
	
	/**
	 * setUp() method is executed by the JUnit framework prior to each 
	 * test case.
	 */
	protected void setUp() {
		// Determine the XML schema we are going to use
		try {
<span class="nc" id="L55">			Message.unconfigure();</span>
<span class="nc" id="L56">			assertTrue (Configure.configure());</span>
<span class="nc" id="L57">		} catch (Exception e) {</span>
<span class="nc" id="L58">			fail (&quot;Unable to setup Message tests.&quot;); </span>
		}
		
		// Any non-standard controllers for client would need to be included here.
		// Specifically, the output response handler is non standard, so include
		// that one here.
<span class="nc" id="L64">		ClientControllerChain head = ClientProcessor.head();</span>
<span class="nc" id="L65">		head.append(new ClientExtension());</span>
		
		// create client to connect
<span class="nc" id="L68">		context = new UserContext();  // by default, localhost</span>
<span class="nc" id="L69">		lobby = new LobbyFrame (context);</span>
<span class="nc" id="L70">		lobby.setVisible(true);</span>
		
<span class="nc" id="L72">		context.setPort(port);</span>
<span class="nc" id="L73">		context.setUser(user);</span>
<span class="nc" id="L74">		context.setPassword(password);</span>
<span class="nc" id="L75">		context.setSelfRegister(false);</span>
		
		// connect client to server
<span class="nc" id="L78">		assertTrue (new ConnectController(lobby).process(context));</span>
		
		// wait for things to settle down. As your test cases become more
		// complex, we may find it necessary to include additional waiting 
		// times.
<span class="nc" id="L83">		waitASecond();</span>
<span class="nc" id="L84">	}</span>

	/**
	 * tearDown() is executed by JUnit at the conclusion of each individual
	 * test case.
	 */
	protected void tearDown() {
		// the other way to leave is to manually invoke controller.
<span class="nc" id="L92">		assertTrue (new DisconnectController (lobby).process(context));</span>
		
<span class="nc" id="L94">		lobby.setVisible(false);</span>
<span class="nc" id="L95">		lobby.dispose();</span>
<span class="nc" id="L96">	}</span>
	
	// helper function to sleep for a second.
	private void waitASecond() {
		// literally wait a second.
		try {
<span class="nc" id="L102">			Thread.sleep(1000);</span>
<span class="nc" id="L103">		} catch (InterruptedException e) {</span>
			
		}
<span class="nc" id="L106">	}</span>
	
	/**
	 * The actual test case. Note its structure, where expected inputs are 
	 * defined and then the execution of a message on the client occurs.
	 * finally the state on the client side is inspected.
	 * &lt;p&gt;
	 * Over time I may have to write additional helper methods to expose 
	 * lots of client-side state for the testers.
	 */
	public void testValidOutput() {
		// get existing text
<span class="nc" id="L118">		String existing = lobby.getInnerPanel().getLobbyOutput().getText();</span>
<span class="nc" id="L119">		String text = &quot;Hello&quot;;</span>
<span class="nc" id="L120">		int uid = 192;</span>
		
		// create OUTPUT message
<span class="nc" id="L123">		String cmd = Message.responseHeader(true) + &quot;&lt;output from='&quot; + uid + &quot;'&gt;&quot;;</span>
<span class="nc" id="L124">		cmd += &quot;&lt;text&gt;&quot; + text + &quot;&lt;/text&gt;&lt;/output&gt;&lt;/response&gt;&quot;;</span>
<span class="nc" id="L125">		Document d = Message.construct(cmd);</span>
<span class="nc" id="L126">		Message m = new Message(d);</span>
		
		// process message on client
<span class="nc" id="L129">		context.getClient().process(m);</span>
		
		// validate new text appended; trim excess when comparing output because of trailing carriage returns and the like.
<span class="nc" id="L132">		String newText = lobby.getInnerPanel().getLobbyOutput().getText().trim();</span>
<span class="nc" id="L133">		String target = existing + uid + &quot;: &quot; + text;</span>

<span class="nc" id="L135">		System.out.println(newText.length() + &quot;,&quot; + target.length());</span>
<span class="nc" id="L136">		assertEquals (target, newText);</span>
<span class="nc" id="L137">	}</span>
}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.5.6.201201232323</span>Merged (Apr 28, 2012 2:01:54 PM)</div></body></html>