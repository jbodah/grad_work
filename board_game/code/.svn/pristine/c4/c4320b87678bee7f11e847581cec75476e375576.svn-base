<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../../../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../../../.resources/report.gif" type="image/gif"/><title>Factory.java</title><link rel="stylesheet" href="../../../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../../../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="right"><a href="../../../.sessions.html" class="el_session">Sessions</a></span><a href="../../../index.html" class="el_report">Merged (Apr 28, 2012 2:01:54 PM)</a> &gt; <a href="../../index.html" class="el_group">Framework</a> &gt; <a href="../index.html" class="el_bundle">src</a> &gt; <a href="index.html" class="el_package">ks.client.game</a> &gt; <span class="el_source">Factory.java</span></div><h1>Factory.java</h1><pre class="source lang-java linenums">package ks.client.game;


import heineman.Idiot;
import heineman.Klondike;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Properties;

import scaviola.BCastle;
import sudoku.Sudoku;

import darrent.FreeCell;
import dijordan.PyramidGame;

import brlandry.GrandfatherClock;

import wordsteal.Wordsteal;
import yostinso.FlowerGarden;

import kdaquila.Spider;
import ks.client.game.solitaire.SolitaireGameInformation;
import ks.client.game.sudoku.SudokuGameInformation;
import ks.client.game.wordsteal.WordstealGameInformation;
import ks.common.games.Solitaire;

<span class="pc" id="L28">public class Factory {</span>

	/** Known game types. Constructed the first time validGameTypes is invoked. */
<span class="fc" id="L31">	static ArrayList&lt;String&gt; gameTypes = null;</span>

	/** Known solitaire variations. */
<span class="fc" id="L34">	static ArrayList&lt;String&gt; solitaireVariations = null;</span>

	/**
	 * Determine whether gameType is solitaire.
	 */
	public static boolean isSolitaire(String gameType) {
<span class="nc bnc" id="L40" title="All 2 branches missed.">		if (solitaireVariations == null) {</span>

<span class="nc" id="L42">			solitaireVariations = new ArrayList&lt;String&gt;();</span>

<span class="nc" id="L44">			solitaireVariations.add(GrandfatherClock.class.getCanonicalName());</span>
<span class="nc" id="L45">			solitaireVariations.add(FreeCell.class.getCanonicalName());</span>
<span class="nc" id="L46">			solitaireVariations.add(PyramidGame.class.getCanonicalName());</span>
<span class="nc" id="L47">			solitaireVariations.add(Idiot.class.getCanonicalName());</span>
<span class="nc" id="L48">			solitaireVariations.add(Klondike.class.getCanonicalName());</span>
<span class="nc" id="L49">			solitaireVariations.add(Spider.class.getCanonicalName());</span>
<span class="nc" id="L50">			solitaireVariations.add(BCastle.class.getCanonicalName());</span>
<span class="nc" id="L51">			solitaireVariations.add(FlowerGarden.class.getCanonicalName());</span>
		}
		
<span class="nc" id="L54">		return solitaireVariations.contains(gameType);</span>
	}

	/**
	 * Determine whether gameType is wordsteal.
	 */
	public static boolean isWordSteal(String gameType) {
<span class="nc" id="L61">		return Wordsteal.class.getCanonicalName().equals(gameType);</span>
	}
	
	public static boolean isSudoku(String gameType) {
<span class="nc" id="L65">		return Sudoku.class.getCanonicalName().equals(gameType);</span>
	}

	/** 
	 * Return the set of valid game types supported by this factory.
	 * 
	 * @return
	 */
	public static Iterator&lt;String&gt; validGameTypes() {
<span class="nc bnc" id="L74" title="All 2 branches missed.">		if (gameTypes == null) { </span>
<span class="nc" id="L75">			gameTypes = new ArrayList&lt;String&gt;();</span>

			// wordsteal
<span class="nc" id="L78">			gameTypes.add(Wordsteal.class.getCanonicalName());</span>

			// solitaire
<span class="nc" id="L81">			gameTypes.add(GrandfatherClock.class.getCanonicalName());</span>
<span class="nc" id="L82">			gameTypes.add(FreeCell.class.getCanonicalName());</span>
<span class="nc" id="L83">			gameTypes.add(PyramidGame.class.getCanonicalName());</span>
<span class="nc" id="L84">			gameTypes.add(Idiot.class.getCanonicalName());</span>
<span class="nc" id="L85">			gameTypes.add(Klondike.class.getCanonicalName());</span>
<span class="nc" id="L86">			gameTypes.add(Spider.class.getCanonicalName());</span>
<span class="nc" id="L87">			gameTypes.add(BCastle.class.getCanonicalName());</span>
<span class="nc" id="L88">			gameTypes.add(FlowerGarden.class.getCanonicalName());</span>
			
			// sudoku
<span class="nc" id="L91">			gameTypes.add(Sudoku.class.getCanonicalName());</span>
		}

<span class="nc" id="L94">		return gameTypes.iterator();</span>
	}

	/**
	 * Construct an object representing the specific Game information
	 * The options parameter must have a 'game' property that represents
	 * the desired game to construct. Valid values for this string
	 * are returned by the {@link #validGameTypes()} method.
	 * &lt;p&gt;
	 * Properties should also have a 'seed' attribute to determine
	 * the random seed to use for the game.
	 * &lt;p&gt;
	 * If the game attribute is missing or incorrect, then null is returned.
	 *  
	 * @param options      Standard options for game (game, seed)
	 * @param gameOptions  Game-specific options for game
	 * @return object that serves to store all game-specific information.
	 * @exception          IllegalArgumentException if game is invalid or missing
	 */
	public static GameInformation create(Properties options, Properties gameOptions) throws IllegalArgumentException {
<span class="fc" id="L114">		String gameName = options.getProperty(&quot;game&quot;);</span>

<span class="fc" id="L116">		Class&lt;?&gt; c = null;</span>
		try {
<span class="fc" id="L118">			c = Class.forName(gameName);</span>
<span class="nc" id="L119">		} catch (Exception e) {</span>
<span class="nc" id="L120">			throw new IllegalArgumentException (&quot;Unable to create game for unknown type: &quot;+ gameName);</span>
		}

		// see if this class is a solitaire variation
<span class="pc bpc" id="L124" title="1 of 2 branches missed.">		if (Solitaire.class.isAssignableFrom(c)) {</span>
<span class="nc" id="L125">			return new SolitaireGameInformation (options, gameOptions);</span>
		}

<span class="pc bpc" id="L128" title="1 of 2 branches missed.">		if (Wordsteal.class.isAssignableFrom(c)) {</span>
<span class="fc" id="L129">			return new WordstealGameInformation (options, gameOptions);</span>
		}

<span class="nc bnc" id="L132" title="All 2 branches missed.">		if (Sudoku.class.isAssignableFrom(c)) {</span>
<span class="nc" id="L133">			return new SudokuGameInformation (options, gameOptions);</span>
		}
		
<span class="nc" id="L136">		throw new IllegalArgumentException (&quot;Invalid game type: &quot;+ gameName);</span>
	}

	
}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.5.6.201201232323</span>Merged (Apr 28, 2012 2:01:54 PM)</div></body></html>