<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../../../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../../../.resources/report.gif" type="image/gif"/><title>TestCard.java</title><link rel="stylesheet" href="../../../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../../../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="right"><a href="../../../.sessions.html" class="el_session">Sessions</a></span><a href="../../../index.html" class="el_report">Merged (Apr 28, 2012 2:01:54 PM)</a> &gt; <a href="../../index.html" class="el_group">Framework</a> &gt; <a href="../index.html" class="el_bundle">test</a> &gt; <a href="index.html" class="el_package">ks.common.model</a> &gt; <span class="el_source">TestCard.java</span></div><h1>TestCard.java</h1><pre class="source lang-java linenums">package ks.common.model;

import junit.framework.TestCase;

<span class="nc" id="L5">public class TestCard extends TestCase {</span>

	public void testSample() {
<span class="nc" id="L8">		Card c = new Card(10, Card.CLUBS);</span>
<span class="nc" id="L9">		assertEquals (10, c.getRank());</span>
<span class="nc" id="L10">		assertEquals (Card.CLUBS, c.getSuit());</span>
		
<span class="nc" id="L12">		Card c2 = new Card (c);</span>
<span class="nc" id="L13">		assertEquals (c, c2);</span>
<span class="nc" id="L14">		assertEquals (c2, c);</span>
<span class="nc" id="L15">	}</span>
	
	public void testBadNumbers() {
		try {
<span class="nc" id="L19">			new Card(-1, Card.CLUBS);</span>
<span class="nc" id="L20">			fail (&quot;Invalid number should fail.&quot;);</span>
<span class="nc" id="L21">		} catch (Exception e) {</span>
			
		}
		
		try {
<span class="nc" id="L26">			new Card(6, -1);</span>
<span class="nc" id="L27">			fail (&quot;Invalid suit should fail.&quot;);</span>
<span class="nc" id="L28">		} catch (Exception e) {</span>
			
		}
		try {
<span class="nc" id="L32">			new Card(51, Card.CLUBS);</span>
<span class="nc" id="L33">			fail (&quot;Invalid number should fail.&quot;);</span>
<span class="nc" id="L34">		} catch (Exception e) {</span>
			
		}
		
		try {
<span class="nc" id="L39">			new Card(6, 9);</span>
<span class="nc" id="L40">			fail (&quot;Invalid suit should fail.&quot;);</span>
<span class="nc" id="L41">		} catch (Exception e) {</span>
			
		}
		
		// make sure no null
		try {
<span class="nc" id="L47">			new Card(null);</span>
<span class="nc" id="L48">			fail (&quot;must protect against null card.&quot;);</span>
<span class="nc" id="L49">		} catch (Exception e) {</span>
			
		}
<span class="nc" id="L52">	}</span>
	
	// validate compareTo
	public void testCompareTo() {
<span class="nc" id="L56">		Card c1 = new Card (8, Card.HEARTS);</span>
<span class="nc" id="L57">		Card c2 = new Card (9, Card.SPADES);</span>
<span class="nc" id="L58">		Card c3 = new Card (10, Card.DIAMONDS);</span>
<span class="nc" id="L59">		Card c4 = new Card (10, Card.CLUBS);</span>
		
<span class="nc" id="L61">		assertEquals (-1, c1.compareTo(c2));</span>
<span class="nc" id="L62">		assertEquals (1, c2.compareTo(c1));</span>
		
<span class="nc" id="L64">		assertEquals (0, c3.compareTo(c4));</span>
		
<span class="nc" id="L66">		assertEquals (2, c4.compareTo(c1));</span>
		
		// error case. handled properly
<span class="nc" id="L69">		assertEquals (Integer.MAX_VALUE, c1.compareTo(null));</span>
<span class="nc" id="L70">	}</span>
	
	public void testEquals () {
<span class="nc" id="L73">		Card c1 = new Card (8, Card.HEARTS);</span>
<span class="nc" id="L74">		Card c3 = new Card (10, Card.DIAMONDS);</span>
<span class="nc" id="L75">		Card c4 = new Card (10, Card.CLUBS);</span>
		
		// also do equals check
<span class="nc" id="L78">		assertFalse (c3.equals (c4));</span>
<span class="nc" id="L79">		assertTrue (c1.equals (new Card (8, Card.HEARTS)));</span>
		
<span class="nc" id="L81">		assertFalse (c3.equals (null));</span>
<span class="nc" id="L82">		assertFalse (c3.equals(&quot;garbage&quot;));</span>
		
		// test hash
<span class="nc" id="L85">		assertEquals (c1.hashCode(), new Card(8, Card.HEARTS).hashCode());</span>
<span class="nc" id="L86">	}</span>
	
	// face cards
	public void testFaceCardDetection() {
<span class="nc bnc" id="L90" title="All 2 branches missed.">		for (int i = 1; i &lt;= 13; i++) {</span>
<span class="nc" id="L91">			Card c = new Card (i, Card.SPADES);</span>
<span class="nc bnc" id="L92" title="All 2 branches missed.">			if (i &gt;= 11) {</span>
<span class="nc" id="L93">				assertTrue (c.isFaceCard());</span>
			} else {
<span class="nc" id="L95">				assertFalse (c.isFaceCard());</span>
			}
		}
		
<span class="nc" id="L99">		Card c = new Card (1, Card.HEARTS);</span>
<span class="nc" id="L100">		assertTrue (c.isAce());</span>
		
<span class="nc" id="L102">		Card c2 = new Card (2, Card.HEARTS);</span>
<span class="nc" id="L103">		assertFalse (c2.isAce());</span>
<span class="nc" id="L104">	}</span>
	
	// colors
	// face cards
	public void testCardColors() {
		
		
<span class="nc" id="L111">		Card[] cards = new Card[] { new Card (8, Card.HEARTS),</span>
<span class="nc" id="L112">									new Card (9, Card.SPADES),</span>
<span class="nc" id="L113">									new Card (10, Card.DIAMONDS),</span>
<span class="nc" id="L114">									new Card (10, Card.CLUBS) };</span>

<span class="nc bnc" id="L116" title="All 2 branches missed.">		for (int i = 0 ; i &lt; cards.length; i++) {</span>
<span class="nc bnc" id="L117" title="All 2 branches missed.">			for (int j = 0; j &lt; cards.length; j++) {</span>
<span class="nc bnc" id="L118" title="All 2 branches missed.">				if (i %2 == j % 2) { </span>
<span class="nc" id="L119">					assertTrue (cards[i].sameColor(cards[j]));</span>
<span class="nc" id="L120">					assertFalse (cards[i].oppositeColor(cards[j]));</span>
				} else {
<span class="nc" id="L122">					assertFalse (cards[i].sameColor(cards[j]));</span>
<span class="nc" id="L123">					assertTrue (cards[i].oppositeColor(cards[j]));</span>
				}
				
			}
		}
		
		// invalid
<span class="nc" id="L130">		assertFalse (cards[0].sameColor(null));</span>
<span class="nc" id="L131">		assertFalse (cards[0].oppositeColor(null));</span>
		
<span class="nc" id="L133">		int[] colors = { -5, 77, -5, 77 };</span>
<span class="nc bnc" id="L134" title="All 2 branches missed.">		for (int c : colors) {</span>
			try {
<span class="nc" id="L136">				assertFalse (cards[0].sameColor(c));</span>
<span class="nc" id="L137">				fail (&quot;must prevent ambiguous statement.&quot;);</span>
<span class="nc" id="L138">			} catch (IllegalArgumentException iae) {</span>
				// right
			}
			
			try {
<span class="nc" id="L143">				assertFalse (cards[0].oppositeColor(c));</span>
<span class="nc" id="L144">				fail (&quot;must prevent ambiguous statement.&quot;);</span>
<span class="nc" id="L145">			} catch (IllegalArgumentException iae) {</span>
				// right
			}
		}
		
<span class="nc" id="L150">	}</span>

	// validate namings
	public void testNames() {
<span class="nc" id="L154">		String[] names = { Card.CLUBSname, Card.DIAMONDSname, Card.HEARTSname, Card.SPADESname };</span>
		
<span class="nc bnc" id="L156" title="All 2 branches missed.">		for (int i = 0; i &lt; names.length; i++) {</span>
<span class="nc" id="L157">			assertEquals (names[i], Card.getSuitName(i+1));  // +1 for card suits</span>
		}
		
		// invalid
		try {
<span class="nc" id="L162">			Card.getSuitName(-1);</span>
<span class="nc" id="L163">			fail (&quot;invalid arg access.&quot;);</span>
<span class="nc" id="L164">		} catch (IllegalArgumentException iae) {</span>
			
		}
		
		// invalid
		try {
<span class="nc" id="L170">			Card.getSuitName(99);</span>
<span class="nc" id="L171">			fail (&quot;invalid arg access.&quot;);</span>
<span class="nc" id="L172">		} catch (IllegalArgumentException iae) {</span>
			
		}
<span class="nc" id="L175">	}</span>
	
	// testing selected status
	public void testSelections () {
<span class="nc" id="L179">		Card c = new Card (2, Card.HEARTS);</span>
<span class="nc" id="L180">		assertFalse (c.isSelected());</span>
<span class="nc" id="L181">		c.setSelected(true);</span>
<span class="nc" id="L182">		assertTrue (c.isSelected());</span>
<span class="nc" id="L183">		c.setSelected(false);</span>
<span class="nc" id="L184">		assertFalse (c.isSelected());</span>
		
<span class="nc" id="L186">	}</span>
	
	// colors
	// face cards
	public void testSuits() {
<span class="nc" id="L191">		Card[] cards = new Card[] { new Card (8, Card.HEARTS),</span>
<span class="nc" id="L192">									new Card (9, Card.SPADES),</span>
<span class="nc" id="L193">									new Card (10, Card.DIAMONDS),</span>
<span class="nc" id="L194">									new Card (10, Card.CLUBS) };</span>

<span class="nc" id="L196">		assertTrue (cards[2].sameRank(cards[3]));</span>
<span class="nc" id="L197">		assertFalse (cards[1].sameRank(cards[2]));</span>
		
		// default behaviors of null case are ok
<span class="nc" id="L200">		assertFalse (cards[2].sameRank(null));</span>
<span class="nc" id="L201">		assertFalse (cards[2].sameSuit(null));</span>
		
<span class="nc bnc" id="L203" title="All 2 branches missed.">		for (int i = 0 ; i &lt; cards.length; i++) {</span>
<span class="nc bnc" id="L204" title="All 2 branches missed.">			for (int j = 0; j &lt; cards.length; j++) {</span>
<span class="nc bnc" id="L205" title="All 2 branches missed.">				if (i == j) {</span>
<span class="nc" id="L206">					assertTrue (cards[i].sameSuit(cards[j]));</span>
				} else {
<span class="nc" id="L208">					assertFalse (cards[i].sameSuit(cards[j]));</span>
				}				
			}
		}
<span class="nc" id="L212">	}</span>
	
	public void testFaceUpStatus() {
<span class="nc" id="L215">		Card c = new Card (2, Card.HEARTS);</span>
<span class="nc" id="L216">		assertTrue (c.isFaceUp());</span>
<span class="nc" id="L217">		c.setFaceUp(true);</span>
<span class="nc" id="L218">		assertTrue (c.isFaceUp());</span>
		
<span class="nc" id="L220">		c.setFaceUp(false);</span>
<span class="nc" id="L221">		assertFalse (c.isFaceUp());</span>
<span class="nc" id="L222">	}</span>
	
	public void testNaming () {
<span class="nc" id="L225">		Card c = new Card (2, Card.HEARTS);</span>
<span class="nc" id="L226">		assertEquals (&quot;2H&quot;, c.getName());</span>
		try {
<span class="nc" id="L228">			c.setName(&quot;bad&quot;);</span>
<span class="nc" id="L229">			fail(&quot;Can't set card names.&quot;);</span>
<span class="nc" id="L230">		} catch (Exception e) {</span>
			//success.
		}
		
		
<span class="nc" id="L235">	}</span>
	
}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.5.6.201201232323</span>Merged (Apr 28, 2012 2:01:54 PM)</div></body></html>